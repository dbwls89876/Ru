/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-02-15 06:05:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class qna_005fboard_005fwrite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title hereMVC 게시판</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\t#registForm{\r\n");
      out.write("\twidth: 500px;\r\n");
      out.write("\theight:610px;\r\n");
      out.write("\tborder:1px solid red;\r\n");
      out.write("\tmargin : auto;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\th2{\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttable{\r\n");
      out.write("\t\tmargin: auto;\r\n");
      out.write("\t\twidth: 450px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.td_left{\r\n");
      out.write("\t\twidth:150px;\r\n");
      out.write("\t\tbackground: orange;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.td_right{\r\n");
      out.write("\t\twidth: 300px;\r\n");
      out.write("\t\tbackground: skyblue;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#commandCell{\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 게시ㅏㅍㄴ 등록 -->\r\n");
      out.write("\t<section id=\"writeForm\">\r\n");
      out.write("\t\t<h2>게시판글등록</h2>\r\n");
      out.write("\t\t<form action=\"boardWritePro.bo\" method=\"post\" enctype=\"multipart/form-data\" name=\"boardform\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td class=\"td_left\"><label for=\"board_name\">글쓴이</label></td>\r\n");
      out.write("\t\t\t\t\t<td class=\"td_right\"><input type=\"text\" name=\"board_name\" id=\"board_name\" required=\"required\"/></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td class=\"td_left\"><label for=\"board_pass\">비밀번호</label></td>\r\n");
      out.write("\t\t\t\t\t<td class=\"td_right\"><input type=\"password\" name=\"board_pass\" id=\"board_pass\" required=\"required\"/></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td class=\"td_left\"><label for=\"board_subject\">제목</label></td>\r\n");
      out.write("\t\t\t\t\t<td class=\"td_right\"><input type=\"text\" name=\"board_subject\" id=\"board_subject\" required=\"required\"/></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td class=\"td_left\"><label for=\"board_content\">내용</label></td>\r\n");
      out.write("\t\t\t\t\t<td><textarea id=\"board_content\" name=\"board_content\" cols=\"40\" rows=\"15\" required=\"required\"></textarea></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td class=\"td_left\"><label for=\"board_file\">파일 첨부</label></td>\r\n");
      out.write("\t\t\t\t\t<td class=\"td_right\"><input type=\"file\" name=\"board_file\" type=\"file\" id=\"board_file\" required=\"required\"/></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t\t<section id=\"commandCell\">\r\n");
      out.write("\t\t\t\t<input type=\"submit\" value=\"등록\">&nbsp;&nbsp;\r\n");
      out.write("\t\t\t\t<input type=\"reset\" value=\"다시쓰기\">\r\n");
      out.write("\t\t\t</section>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</section>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
