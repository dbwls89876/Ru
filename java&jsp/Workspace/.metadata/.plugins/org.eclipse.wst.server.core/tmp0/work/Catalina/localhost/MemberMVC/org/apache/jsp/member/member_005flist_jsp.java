/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-02-23 03:29:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import vo.*;
import javax.sql.*;
import javax.naming.*;

public final class member_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("vo");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.naming");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");

	ArrayList<MemberBean>list = (ArrayList<MemberBean>)request.getAttribute("memberList");
	PageInfo pageInfo = (PageInfo)request.getAttribute("pageInfo");
	if(pageInfo!=null){
	int listCount = pageInfo.getListCount();
	int nowPage = pageInfo.getPage();
	int maxPage = pageInfo.getMaxPage();
	int startPage = pageInfo.getStartPage();
	int endPage = pageInfo.getEndPage();
	

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원 관리 시스템 관리자모드(회원 목록 보기)</title>\r\n");
      out.write("<style>\r\n");
      out.write("\ttable{\r\n");
      out.write("\t\tmargin : auto;\r\n");
      out.write("\t\twidth : 400px;\r\n");
      out.write("\t\tborder : 1px solid gray;\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t}\r\n");
      out.write("\t.td_title{\r\n");
      out.write("\t\tfont-weight: bold;\r\n");
      out.write("\t\tfont-size: x-large;\r\n");
      out.write("\t}\r\n");
      out.write("\t#pageList{\r\n");
      out.write("\t\tmargin:auto;\r\n");
      out.write("\t\twidth: 500px;\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<table>\r\n");
      out.write("\t<tr><td colspan=2 class=\"td_title\">회원 목록</td></tr>\r\n");
      out.write("\t");
for(int i = 0; i<list.size(); i++){ 
      out.write("\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<a href=\"memberInfo.mem?id=");
      out.print(list.get(i).getId() );
      out.write('"');
      out.write('>');
      out.print(list.get(i).getId() );
      out.write("</a>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<a href=\"memberModForm.mem?id=");
      out.print(list.get(i).getId() );
      out.write("\">수정</a>\r\n");
      out.write("\t\t\t<a href=\"memberDel.mem?id=");
      out.print(list.get(i).getId() );
      out.write("\">삭제</a>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t");
} 
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("<section id = \"pageList\">\r\n");
      out.write("\t");
if(nowPage<=1){ 
      out.write("\r\n");
      out.write("\t\t[이전]&nbsp;\r\n");
      out.write("\t");
}else{ 
      out.write("\r\n");
      out.write("\t\t<a href=\"boardList.bo?page=");
      out.print(nowPage-1 );
      out.write("\">[이전]</a>&nbsp;\r\n");
      out.write("\t");
} 
      out.write('\r');
      out.write('\n');
      out.write('	');
for(int a = startPage; a<=endPage; a++){ 
		if(a==nowPage){
      out.write("\r\n");
      out.write("\t\t\t[");
      out.print(a );
      out.write("]\r\n");
      out.write("\t\t");
}else{ 
      out.write("\r\n");
      out.write("\t\t\t<a href=\"boardList.bo?page=");
      out.print(a );
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(a );
      out.write("]</a>&nbsp;\r\n");
      out.write("\t\t");
} 
      out.write('\r');
      out.write('\n');
      out.write('	');
} 
      out.write('\r');
      out.write('\n');
      out.write('	');
if(nowPage>=maxPage){ 
      out.write("\r\n");
      out.write("\t\t[다음]\r\n");
      out.write("\t");
}else{ 
      out.write("\r\n");
      out.write("\t\t<a href=\"boardList.bo?page=");
      out.print(nowPage+1 );
      out.write("\">[다음]</a>\r\n");
      out.write("\t");
} 
      out.write("\r\n");
      out.write("</section>\r\n");
}else{ 
      out.write("\r\n");
      out.write("\t<section id=\"emptyArea\">등록된 글이 없습니다.</section>\r\n");
      out.write("\r\n");
} 
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tif(conform('정말 삭제하시겠습니까?')){\r\n");
      out.write("\t\tlocation.href=\"memberDel\";\r\n");
      out.write("\t\talert(id);\r\n");
      out.write("\t}\r\n");
      out.write("\t\t\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
